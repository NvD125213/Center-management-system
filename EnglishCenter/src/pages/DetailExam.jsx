import { useEffect, useState, useCallback, useRef } from "react";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { Box, CircularProgress } from "@mui/material";
import { useGetAllQuestionsOnExamQuery } from "../services/questionServices";
import ViewList from "../components/ExamV2/ViewList";
import DrawerList from "../components/ExamV2/DrawerList";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
} from "@mui/material";
import { useSubmitAnswerMutation } from "../services/answerServices";
import NotFound from "./NotFound";
import { toast } from "react-hot-toast";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";

const DetailExamV2 = () => {
  const { examId } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const { examTime, examName, subjectName, startTime, selectedDuration } =
    location.state || {};

  const examIdNumber = examId;

  const [openConfirmModal, setOpenConfirmModal] = useState(false);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [userAnswers, setUserAnswers] = useState({});
  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());
  const [isExamActive, setIsExamActive] = useState(true);
  const [openSuccessModal, setOpenSuccessModal] = useState(false);
  const [loading, setLoading] = useState(false);

  const { data: examQuestions } = useGetAllQuestionsOnExamQuery(examIdNumber);
  const [submitExam, { isLoading: isSubmitting }] = useSubmitAnswerMutation();

  // useRef ƒë·ªÉ l∆∞u payload hi·ªán th·ªùi m√† kh√¥ng render l·∫°i component khi thay ƒë·ªïi
  const payloadRef = useRef({
    exam_id: Number(examIdNumber),
    answers: [],
  });

  const pendingPayloadRef = useRef(null);

  // C·∫£nh b√°o khi ƒë√≥ng tab, reload ho·∫∑c tho√°t trang
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (isExamActive & (examQuestions.length > 0)) {
        e.preventDefault();
        const message =
          "B·∫°n ƒëang trong qu√° tr√¨nh l√†m b√†i thi. N·∫øu tho√°t ra, c√°c c√¢u tr·∫£ l·ªùi ch∆∞a n·ªôp s·∫Ω b·ªã m·∫•t. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?";
        e.returnValue = message;
        return message;
      }
    };

    window.addEventListener("beforeunload", handleBeforeUnload);

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
    };
  }, [isExamActive, examQuestions]);

  // Ch·∫∑n navigation trong app (React Router), ko pushState qu√° nhi·ªÅu
  useEffect(() => {
    if (!isExamActive) return;

    // pushState 1 l·∫ßn duy nh·∫•t
    if (window.history.state === null) {
      window.history.pushState({ preventBack: true }, "", window.location.href);
    }

    const handlePopState = (e) => {
      const confirmExit = window.confirm(
        "B·∫°n ƒëang trong qu√° tr√¨nh l√†m b√†i thi. N·∫øu tho√°t ra, c√°c c√¢u tr·∫£ l·ªùi ch∆∞a n·ªôp s·∫Ω b·ªã m·∫•t. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?"
      );
      if (!confirmExit) {
        e.preventDefault();
        window.history.pushState(
          { preventBack: true },
          "",
          window.location.href
        );
      }
    };

    window.addEventListener("popstate", handlePopState);

    return () => {
      window.removeEventListener("popstate", handlePopState);
    };
  }, [isExamActive]);

  // C·∫≠p nh·∫≠t userAnswers state b√¨nh th∆∞·ªùng ƒë·ªÉ render l·∫°i UI
  const handleAnswerChange = (questionId, answer) => {
    setUserAnswers((prev) => ({
      ...prev,
      [questionId]: answer,
    }));
  };

  const handleBookmarkToggle = (questionId) => {
    setBookmarkedQuestions((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(questionId)) newSet.delete(questionId);
      else newSet.add(questionId);
      return newSet;
    });
  };

  // C·∫≠p nh·∫≠t payloadRef.answers m·ªói l·∫ßn userAnswers ho·∫∑c examQuestions thay ƒë·ªïi
  useEffect(() => {
    if (!examQuestions) return;
    payloadRef.current = {
      exam_id: Number(examIdNumber),
      answers: examQuestions
        .flatMap((part) => part.data.flatMap((group) => group.questions))
        .map((q) => ({
          question_id: q.id,
          selected_option:
            Object.prototype.hasOwnProperty.call(userAnswers, String(q.id)) &&
            userAnswers[String(q.id)] !== ""
              ? userAnswers[String(q.id)]
              : null,
        })),
    };
  }, [examQuestions, userAnswers, examIdNumber]);

  const handleSubmitExam = () => {
    if (!examQuestions) return;

    // C·∫≠p nh·∫≠t payload
    payloadRef.current = {
      exam_id: Number(examIdNumber),
      answers: examQuestions
        .flatMap((part) => part.data.flatMap((group) => group.questions))
        .map((q) => ({
          question_id: q.id,
          selected_option:
            Object.prototype.hasOwnProperty.call(userAnswers, String(q.id)) &&
            userAnswers[String(q.id)] !== ""
              ? userAnswers[String(q.id)]
              : null,
        })),
    };

    // Lu√¥n m·ªü modal confirm d√π ƒë·ªß hay thi·∫øu c√¢u tr·∫£ l·ªùi
    pendingPayloadRef.current = JSON.parse(JSON.stringify(payloadRef.current));
    setOpenConfirmModal(true);
  };

  // H√†m submit th·ª±c s·ª± khi ng∆∞·ªùi d√πng x√°c nh·∫≠n n·ªôp b√†i
  const handleForceSubmit = () => {
    submitExam(payloadRef.current)
      .unwrap()
      .then((res) => {
        if (res.success === true) {
          setIsExamActive(false);
          setOpenConfirmModal(false);
          pendingPayloadRef.current = null;

          // m·ªü modal ch√∫c m·ª´ng
          setOpenSuccessModal(true);
          setLoading(true);

          // gi·∫£ l·∫≠p loading 2 gi√¢y
          setTimeout(() => {
            setLoading(false);
            setOpenSuccessModal(false);
            navigate(`/test-online/describe/${examId}`);
          }, 2000);
        } else {
          toast.error("C√≥ l·ªói x·∫£y ra !");
        }
      })
      .catch((err) => {
        console.error("Submit failed:", err);
      });
  };
  if (examQuestions?.length <= 0) return <NotFound />;

  function countQuestionsSummary(partsData) {
    let totalQuestions = 0;

    const countByPart = partsData?.map((part) => {
      const partCount = part.data.reduce(
        (sum, group) => sum + group.questions.length,
        0
      );
      totalQuestions += partCount;

      return {
        part: part.part,
        totalQuestions: partCount,
      };
    });

    return {
      totalQuestions,
      countByPart,
    };
  }
  return (
    <>
      <Box display="flex" height="100vh">
        <Box
          flex="8"
          sx={{ maxHeight: "100vh", overflowY: "auto", pr: 1 }}
          bgcolor="#f5f5f5"
          p={2}>
          <ViewList
            questions={examQuestions || []}
            selectedQuestionId={selectedQuestion?.id}
            onSelectQuestion={setSelectedQuestion}
            userAnswers={userAnswers}
            onAnswerChange={handleAnswerChange}
            bookmarkedQuestions={bookmarkedQuestions}
            onBookmarkToggle={handleBookmarkToggle}
            examName={examQuestions?.examName || examName}
            examTime={examTime}
            subjectName={subjectName}
            startTime={startTime}
            selectedDuration={selectedDuration}
          />
        </Box>

        <Box
          flex="2"
          bgcolor="#ffffff"
          p={2}
          sx={{ borderLeft: "1px solid #e0e0e0" }}>
          <DrawerList
            questions={examQuestions || []}
            onSelectQuestion={setSelectedQuestion}
            selectedQuestionId={selectedQuestion?.id}
            userAnswers={userAnswers}
            bookmarkedQuestions={bookmarkedQuestions}
            examTime={examTime}
            onSubmitExam={handleSubmitExam}
          />
        </Box>
      </Box>

      <Dialog
        open={openConfirmModal}
        onClose={() => setOpenConfirmModal(false)}
        maxWidth="xs"
        fullWidth>
        <DialogTitle sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <WarningAmberIcon color="warning" />
          <Typography variant="h6" fontWeight="bold">
            X√°c nh·∫≠n n·ªôp b√†i
          </Typography>
        </DialogTitle>

        <DialogContent>
          <Box textAlign="start" py={1}>
            <Typography variant="body1">
              {Object.keys(userAnswers).length <
              countQuestionsSummary(examQuestions).totalQuestions ? (
                <>
                  B·∫°n ch∆∞a ho√†n th√†nh b√†i thi! <br />
                  M·ªõi ch·ªâ c√≥{" "}
                  <strong style={{ color: "red" }}>
                    {Object.keys(userAnswers).length}/
                    {countQuestionsSummary(examQuestions).totalQuestions}
                  </strong>{" "}
                  c√¢u ƒë∆∞·ª£c ho√†n th√†nh. <br />
                  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i?
                </>
              ) : (
                <>
                  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën <strong>n·ªôp b√†i</strong>? <br />
                  H√†nh ƒë·ªông n√†y s·∫Ω k·∫øt th√∫c b√†i thi v√† b·∫°n kh√¥ng th·ªÉ quay l·∫°i.
                </>
              )}
            </Typography>
          </Box>
        </DialogContent>

        <DialogActions sx={{ justifyContent: "end", pb: 2, px: 3 }}>
          <Button
            onClick={() => setOpenConfirmModal(false)}
            variant="outlined"
            color="inherit">
            Ti·∫øp t·ª•c
          </Button>
          <Button
            onClick={handleForceSubmit}
            variant="contained"
            color="error"
            sx={{ minWidth: 100 }}>
            N·ªôp b√†i
          </Button>
        </DialogActions>
      </Dialog>
      <Dialog open={openSuccessModal}>
        <DialogTitle>üéâ Ch√∫c m·ª´ng b·∫°n!</DialogTitle>
        <DialogContent sx={{ textAlign: "center", p: 4 }}>
          <Typography variant="h6" color="success.main">
            B·∫°n ƒë√£ n·ªôp b√†i th√†nh c√¥ng!
          </Typography>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default DetailExamV2;
